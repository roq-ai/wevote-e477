generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model candidate {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String   @db.Uuid
  election_id        String   @db.Uuid
  campaign_statement String?  @db.VarChar(255)
  votes_received     Int?
  election_position  String?  @db.VarChar(255)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  election           election @relation(fields: [election_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user               user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vote               vote[]
}

model election {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String      @db.VarChar(255)
  start_date    DateTime    @db.Timestamp(6)
  end_date      DateTime    @db.Timestamp(6)
  description   String?     @db.VarChar(255)
  university_id String      @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  candidate     candidate[]
  university    university  @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vote          vote[]
}

model guest {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String     @db.Uuid
  university_id String     @db.Uuid
  visit_date    DateTime   @db.Timestamp(6)
  purpose       String?    @db.VarChar(255)
  notes         String?    @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  university    university @relation(fields: [university_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model university {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?    @db.VarChar(255)
  location     String?    @db.VarChar(255)
  founded_date DateTime?  @db.Timestamp(6)
  name         String     @db.VarChar(255)
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  user_id      String     @db.Uuid
  tenant_id    String     @db.VarChar(255)
  election     election[]
  guest        guest[]
  user         user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  candidate   candidate[]
  guest       guest[]
  university  university[]
  vote        vote[]
}

model vote {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  candidate_id String    @db.Uuid
  election_id  String    @db.Uuid
  vote_date    DateTime  @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  candidate    candidate @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  election     election  @relation(fields: [election_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
